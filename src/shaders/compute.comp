#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY_MAG 5.8
#define GRAVITY_ACC 0.3
#define FrustumCulling 1
#define DistanceCulling 1
#define OrientationCulling 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};


//Error fixed: only need 16 bytes for each NumBlades
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

//layout(set = 2, binding = 3) uniform sampler2D texSampler;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// helper function to check if a vec3 is within the bounds of a cube
bool inBoundsVec3(vec3 value, float bounds) {
	bounds += 0.1; // Add a small buffer to the bounds
	return inBounds(value.x, bounds) && inBounds(value.y, bounds) && inBounds(value.z, bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	if (index >= blades.length()) {
		return;
	}

	Blade blade = blades[index];
	// offset for time
	float Time = sin(totalTime * 0.5) * 10.0;
	Time = totalTime;

	//-------------------Control points-------------------
	// v0
	vec3 position = blade.v0.xyz;
	// This is orientation according to the instructions in github
	float orientation = blade.v0.w;

	// v1
	vec3 bezierPoint = blade.v1.xyz;
	float height = blade.v1.w;

	// v2
	vec3 modeGuide = blade.v2.xyz;
	float width = blade.v2.w;

	// up
	vec3 bladeUp = blade.up.xyz;
	float stiffness = blade.up.w;

	// direction vector along the blade width
	vec3 direction = vec3(cos(orientation),0.0, sin(orientation));

	//-------------------Apply recovery-------------------
	vec3 iv2 = position + bladeUp * height;
	vec3 r = (iv2 - modeGuide) * stiffness;

	//-------------------Apply Gravity-------------------
	vec4 D = vec4(0.0, -GRAVITY_ACC , 0.0, GRAVITY_MAG);
	vec3 gE = normalize(D.yxz) * D.w;

	vec3 gF = 0.25 * abs(gE) * cross(direction,bladeUp);
	vec3 g = gE + gF;

	//-------------------Apply wind-------------------
	// Influence of the wind on the blade
	// 1. The direction of the wind wave at the position of the blade of grass
	// 2. The strength of the wind wave at the position of the blade of grass
	// 3. The alignment of the blade towards the wind wave
	vec3 windDirection = vec3(sin(blade.v0.x * Time), 0.0, cos(blade.v0.z * Time));
	// The alignment of the blade towards the wind wave
	float directionRatio = 1.0 - abs(dot(normalize(windDirection), normalize(modeGuide - position)));
	float heightRatio = dot((modeGuide - position), bladeUp) / height;
	float windAlignment = directionRatio * heightRatio;
	vec3 wind = windDirection * windAlignment * 1.2;

	//-------------------Tramsform v2-------------------
	vec3 tv2 = (g + r + wind) * deltaTime;
	vec3 newV2 = blade.v2.xyz + tv2;

	//-------------------Paper: 5.2 State Validation-------------------
	// 1. v2 must not be pushed beneath the ground
	float projection = dot(bladeUp, newV2 - position);
	newV2 = newV2 - bladeUp * min(projection, 0.0);

	// 2. the position of v1 has to be set according to the position of v2 (the projection length onto the ground plane)
	//float lproj = length(modeGuide - position - bladeUp * dot((modeGuide - position), bladeUp));
	float lproj = length(newV2 - position - bladeUp * dot((newV2 - position), bladeUp));
	vec3 newV1 = position + height * bladeUp * max(1 - (lproj/height), 0.05 * max(lproj/height,1.0));

	// 3. the length of the curve must be equal to the height of the blade of grass.
	// L0 indicates the distance between the first and the last control point
	float L0 = length(newV2 - position);
	// L1 is the sum of all distances between a control point and its subsequent one
	float L1 = length(newV1 - position) + length(newV2 - newV1);
	// three control points --> n = 2
	float l = (2.0 * L0 + (2.0 - 1.0) *  L1)/ (2.0 + 1.0);

	// ratio r between the height of the blade
	float ratio = height / l;
	vec3 V1corr = position + ratio * (newV1 - position);
	vec3 V2corr = V1corr + ratio * (newV2 - V1corr);

	//-------------------Update current blades-------------------
	//v0 = v0;
	blade.v1 = vec4(V1corr, height);
	blade.v2 = vec4(V2corr, width);
	blades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	vec3 camPos = inverse(camera.view)[3].xyz;
	// mid point of the blade
	vec3 midPoint = (0.25 * blade.v0.xyz + 0.5 * blade.v1.xyz + 0.25 * blade.v2.xyz);

#if FrustumCulling
	//-------------------View-frustum culling-------------------
	// Project to normalized device coordinates
	vec4 midPointClipSpace = camera.proj * camera.view * vec4(midPoint, 1.0);
	vec4 v0ClipSpace = camera.proj * camera.view * vec4(blade.v0.xyz, 1.0);
	vec4 v2ClipSpace = camera.proj * camera.view * vec4(blade.v2.xyz,1.0);

	if(!inBoundsVec3(midPointClipSpace.xyz, midPointClipSpace.w) && !inBoundsVec3(v0ClipSpace.xyz, v0ClipSpace.w) && !inBoundsVec3(v2ClipSpace.xyz, v2ClipSpace.w)){
		return;
	}
#endif
#if OrientationCulling
	//-------------------Orientation culling-------------------
	vec3 viewDirection = normalize(camPos - blade.v0.xyz); 
	vec4 DirectionC = camera.view * vec4(viewDirection, 1.0);// Dirc in Paper
	vec4 DirectionD = camera.view * vec4(direction, 0.0); // Dird in Paper
	if(abs(dot(normalize(DirectionC), normalize(DirectionD))) >= 0.9){
		return;
	}

#endif
#if DistanceCulling
	//-------------------Distance culling with buckets-------------------
	float dProj = length(blade.v0.xyz - camPos - bladeUp * dot(blade.v0.xyz - camPos, bladeUp));
	float maxDistance = 30.0;
	float n = 10.0;
	if(mod(index,n) >= int(floor(n * (1.0 - dProj/maxDistance)))){
		return;
	}	
#endif

	// Write non-culled blades to culledBlades buffer
	uint outputIndex = atomicAdd(numBlades.vertexCount, 1);
	culledBlades[outputIndex] = blade;
}
