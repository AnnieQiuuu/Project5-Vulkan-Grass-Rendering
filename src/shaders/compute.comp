#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY_MAG 0.1
#define GRAVITY_ACC 0.2

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

//Error fixed: only need 16 bytes for each NumBlades
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	if (index >= blades.length()) {
		return;
	}

	Blade blade = blades[index];
	// offset for time
	float Time = totalTime;

	// v0
	vec3 position = blade.v0.xyz;
	float direction = blade.v0.w;

	// v1
	vec3 bezierPoint = blade.v1.xyz;
	float height = blade.v1.w;

	// v2
	vec3 modeGuide = blade.v2.xyz;
	float width = blade.v2.w;

	// up
	vec3 bladeUp = blade.up.xyz;
	float stiffness = blade.up.w;

	// Apply Gravity
	vec4 D = vec4(0.0, -GRAVITY_MAG, 0.0, -GRAVITY_ACC);
	vec3 gE = normalize(D.yxz) * D.w;
	vec3 gF = 0.25 * abs(gE) * direction;
	vec3 g = gE + gF;

	// Apply recovery
	vec4 iv2 = vec4(position + bladeUp * height, width);
	vec4 r = (iv2 - blade.v2) * stiffness;

	// Apply wind
	vec3 windDirection =  vec3(sin(blade.v0.x + Time), 0.0, cos(blade.v0.z +  Time)) * 0.5;
	float fd = 1.0 - dot(normalize(windDirection), normalize(blade.v2.xyz - blade.v0.xyz));
	vec3 windAlignment = windDirection * fd;

	//test
	vec3 wind = windDirection + windAlignment;

	//Tramsform
	vec3 tv2 = (g + r.xyz + wind) * Time;
	//vec3 tv2 = g * Time; 
	//vec3 tv2 = r.xyz * Time; 
	//vec3 tv2 = wind * Time; 

	vec3 newV2 = blade.v2.xyz + tv2;

	//Paper: 5.2 State Validation

	// 1. v2 must not be pushed beneath the ground
	//float projection = dot(bladeUp, (modeGuide - position));
	//vec3 newV2 = modeGuide - bladeUp * min(projection, 0.0);
	float projection = dot(bladeUp, newV2 - position);
	newV2 = newV2 - bladeUp * min(projection, 0.0);

	// 2. the position of v1 has to be set according to the position of v2 (the projection length onto the ground plane)
	float lproj = length(modeGuide - position - bladeUp * dot((modeGuide - position), bladeUp));
	vec3 newV1 = position + height * bladeUp * max(1 - (lproj/height), 0.05 * max(lproj/height,1.0));

	// 3. the length of the curve must be equal to the height of the blade of grass.
	// L0 indicates the distance between the first and the last control point
	float L0 = length(newV2 - position);
	// L1 is the sum of all distances between a control point and its subsequent one
	float L1 = length(newV1 - position) + length(newV2 - newV1);
	// three control points --> n = 2
	float l = (2.0 * L0 + (2.0 - 1.0) *  L1)/ (2.0 + 1.0);

	// ratio r between the height of the blade
	float ratio = height / l;
	vec3 V1corr = position + ratio * (newV1 - position);
	vec3 V2corr = V1corr + ratio * (newV2 - position);

	// Update
	//v0 = v0;
	blade.v1 = vec4(V1corr, height);
	blade.v2 = vec4(V2corr, width);



	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	bool cull = false;

	// Orientation culling
	vec3 bladePositionInViewSpace = (camera.view * vec4(blade.v0.xyz, 1.0)).xyz;
	vec3 viewVector = normalize(bladePositionInViewSpace);
	float dotTest = dot(viewVector, blade.up.xyz);
	if (abs(dotTest) < 0.9) {
		cull = true;
	}

	// View-frustum culling
	vec3 midPoint = (0.25 * blade.v0.xyz + 0.5 * blade.v1.xyz + 0.25 * blade.v2.xyz);
	vec4 midPointViewSpace = camera.view * vec4(midPoint, 1.0);
	vec4 v0ViewSpace = camera.view * blade.v0;
	vec4 v2ViewSpace = camera.view * blade.v2;

	if (inBounds(midPointViewSpace.x, 1.0) && inBounds(midPointViewSpace.y, 1.0) && inBounds(midPointViewSpace.z, 1.0) &&
		inBounds(v0ViewSpace.x, 1.0) && inBounds(v0ViewSpace.y, 1.0) && inBounds(v0ViewSpace.z, 1.0) &&
		inBounds(v2ViewSpace.x, 1.0) && inBounds(v2ViewSpace.y, 1.0) && inBounds(v2ViewSpace.z, 1.0)) {
		cull = false;
	} else {
		cull = true;
	}

	// Distance culling with buckets
	float distance = length(blade.v0.xyz - camera.view[0].xyz);
	float maxDistance = 100.0;
	if (distance > maxDistance) {
		cull = true;
	} else {
		cull = false;
		float numBuckets = 10.0;
		float bucketSize = maxDistance / numBuckets;
		int bucketIndex = int(distance / bucketSize);
		float cullProbability = float(bucketIndex) / numBuckets;
		if (fract(cullProbability) > 0.5) {
			cull = true;
		}
	}

	// Write non-culled blades to culledBlades buffer
	if (!cull) {
		uint outputIndex = atomicAdd(numBlades.vertexCount, 1);
		culledBlades[outputIndex] = blade;
	}

}
